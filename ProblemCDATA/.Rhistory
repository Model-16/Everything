dim(my_vector)
attributes(my_vector)
my_vecctor
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, ncol = 5, nrow = 4)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
my_datadatadata
class(my_data)
c("patients", "age", "weight", "bp", "rating", "test")
cnames <- c("patients", "age", "weight", "bp", "rating", "test")
cnames
info()
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(patients) <- cnames
colnames(my_data) <- cnames
my_data
TRUE
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 < 7
10 <= 10
5 != 7
5 == 7
!(5 == 7)
FALSE == FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!= 8 && 4 > 3.9
isTRUE
isTRUE(6 > 4)
1
identical(twins, twins)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints < sample()
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ilnts < 0)
any(ints < ------0)
8 bpNWEJLSA
{}
any(ints=\)
any(ints < 0)
all(ints > 0)
Sys.Date()
c(2, 4, 5)
mean(c(2, 4, 5))
submit()
boring_function(My first function)
boring_function("My first funcction")
boring_function("My first funcction")
boring_function("My first funcction")
boring_function("My first funcction!")
boring_function("My first function!")
boring_
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder
remainder(5)
remainder(11, 5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(dev, c(1.4, 3.6, 7.9, 8.8))
evaluate(deviance, c(1.4, 3.6, 7.9, 8.8))
1
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function)
evaluate(function(x){x+1})
evaluate(function(x){x+1}, )
evaluate(function(x){x+1}, 6)
evaluate
evaluate(function(x) x[1], c(8, 4, 0))
evaluate(function(x) x[length(x)], c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit(O)
submit()
telegram("adfgbsagjknfsvzdbjkl")
submit()
submit()
mod_libs("fdgf")
mad_libs("fdgfh")
submit()
'I' %p% 'love' %p% "R!"
library(datasets)
data(irsi)
data(iris)
?iris
iris
mean()
iris[,"Sepal.Length"]
mean[iris[iris[,"Species"] == "virginica","Sepal.Length"]]
mean(iris[iris[,"Species"] == "virginica","Sepal.Length"])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
?apply()
data("mtcars")
mtcars
?tapply
tapply(mtcars[,"mpg"], mtcar[,"cyl"], mean)
tapply(mtcars[,"mpg"], mtcars[,"cyl"], mean)
tapply(mtcars[,"hp"], mtcars[,"cyl"], mean)
x <- tapply(mtcars[,"hp"], mtcars[,"cyl"], mean)
x[3]-x[1]
x[3]-x[1]
x
x[1]
x[2]
x[1,2]
x[[3]]
x$8 - x$4
x[[3]]-x[[1]]
numeric()
numeric()
numeric(1)
numeric(1,2)
numeric(4)
source('~/Documents/Duke/Courses/Coursera/R programming/Assignment 2/cachematrix.R', echo=TRUE)
x <- matrix(rnorm(25), nrow = 5)
x
solve(x)
makeCacheMatrix(x)
y <- matrix(rnorm(100), nrow = 10)
y
cacheSolve(x)
x$1
z <- makeCacheMatrix(x)
cacheSolve(z)
cacheSolve(z)
source('~/Documents/Duke/Courses/Coursera/R programming/Assignment 2/cachematrix.R', echo=TRUE)
cacheSolve(z)
cacheSolve(z)
cacheSolve(z)
cacheSolve(makeCacheMatrix(y))
solve(y)
solve(y)
cacheSolve(makeCacheMatrix(y))
cacheSolve(makeCacheMatrix(y))
cacheSolve(makeCacheMatrix(y))
cacheSolve(makeCacheMatrix(y))
cacheSolve(makeCacheMatrix(y))
cacheSolve(makeCacheMatrix(y))
solve(y)
solve(y)
solve(y)
solve(y)
solve(y)
cacheSolve(makeCacheMatrix(y))
cacheSolve(y)
swirl()
library(datasets)
swirl()
getwd()
install.packages(swirl)
install.packages(swirl())
install.packages("swirl")
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapplu
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags)
sum(flags$orange)
flag_colors
flag_colors <- flags[, 11:17]
head(flags_colors)
hraf(flag_colors)
head(flags_colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[, 19:23]
lapply(flag_shapes, ranges)
lapply(flag_shapes, range)
sapply(flag_shapes)
shape_mat <- sapply(flag_colors, range)
shape <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_colors, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
help
help()
info()
main()
info()
info()
mxt()
nxt()
main)
main()
main()
unique()
sapply()
sapply(flags, unique())
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
flags
head(flags)
flags
head(flags)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$lanmass, mean)
tappy(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, summary)
table(flags$animate)
tapply(flags$population, flags$landamss, summary)
tapply(flags$population, flags$landamss, summary)
tapply(flags$population, flags$landmass, summary)
2
main
main()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(pplants)
names(plants)
head(plants)
head()
head(plants, nrow = 10)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
main()
main()
?sample()
?sample
sample(1:6, 4, replace = TRU)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(10, 20)
sample(20, 10)
sample(1:20, 10)
LETTERS
sample(LETTERD)
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flip <- sample(c(0, 1), 100, replace = T, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, T, c(0, 1))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0, 1))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum()
sum(flips)
?rbinom
;
1
rbinom(1, 100, 0.7)
d
1
flips2 <- rbinom(100, 1, 0.7)
flips2
sum()
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
?rpois
rpois(5)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(my_pois)
hist(cm)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
main*
a
main()
d1 <- Sys.date()
d1 <- Sys.Date
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
as.Date(1970-01-02)
as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t`1
1
-1
q
exut
t1
class(t1)
unclass(t1)
POSIXlt(Sys.time())
t2 <- POSIXlt(Sys.time())
t2 <- POSIXt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d11)
weekdays(t1)
weekdays(d1)
months(t11)
months(t1)
quaters(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strtime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
dt4
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(x = cars$speed, y = cars$dist, xlab = "speed", ylab = "dist", main = "My Plot")
plot(cars, "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mycars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
y
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
ls
pwd
cd ..
ls
setwd("~/Documents/Duke/Projects/MCM-2016/Everything/ProblemCDATA")
;
ls
myDATA <- read
myDATA <- read.csv("Problem C - Most Recent Cohorts Data (Scorecard Elements).csv", TRUE)
myDATA
myDATA[1]
myDATA(,1)
myDATA(,)
myDATA[,1]
names(myDATA)
myDict <- read.csv("Problem C - CollegeScorecardDataDictionary-09-08-2015.csv", TRUE)
View(my_data)
View(my_matrix)
View(my_matrix2)
View(myDATA)
View(myDict)
newDict
newDict <- data.frame()
myDict[,"VARIABLE.NAME"]
for (c in names(myDATA)){}
for (c in names(myDATA)){
newDict <- rbind(newDict, myDict[,VARIABLE.NAME = c])
}
myDict[,VARIABLE.NAME]
myDict[,"VARIABLE.NAME" = "HCM2"]
myDict[,"VARIABLE.NAME" == "HCM2"]
myDict[,myDict$VARIABLE.NAME == "HCM2"]
myDict[myDict$VARIABLE.NAME == "HCM2"]
myDict[,myDict$VARIABLE.NAME == "HCM2"]
myDict[,myDict$VARIABLE.NAME = "HCM2"]
myDict[,myDict$VARIABLE.NAME == "HCM2"]
View(myDict)
myDict[,myDict$(VARIABLE.NAME) == "HCM2"]
myDict[,myDict$VARIABLE.NAME == "HCM2"]
myDict[1,myDict$VARIABLE.NAME == "HCM2"]
myDict[all,myDict$VARIABLE.NAME == "HCM2"]
myDict[myDict$VARIABLE.NAME == "HCM2",]
for (c in names(myDATA)){
newDict <- rbind(newDict, myDict[myDict$VARIABLE.NAME == c])
}
}
myDict[myDict$VARIABLE.NAME == c]
myDict[myDict$VARIABLE.NAME == names(myDATA)]
myDict[myDict$VARIABLE.NAME == names(myDATA),]
myDict[myDict$VARIABLE.NAME == names(myDATA),]
names(myDATA)
myDict[myDict$VARIABLE.NAME == names(myDATA),]
myDict[is.na(myDict$VARIABLE.NAME) && myDict$VARIABLE.NAME == names(myDATA),]
myDict[is.na(myDict$VARIABLE.NAME) & myDict$VARIABLE.NAME == names(myDATA),]
myDict[myDict$VARIABLE.NAME == names(myDATA),]
for (c in names(myDATA)){}
for (c in names(myDATA)){
print(c)}
for (c in names(myDATA)){
newDict <- rbind(newDict,myDict[myDict$VARIABLE.NAME == c,])}
for (c in names(myDATA)){
myDict[myDict$VARIABLE.NAME == c,]
}
for (c in names(myDATA)){
print(myDict[myDict$VARIABLE.NAME == c,])
}
for (c in names(myDATA)){
}
View(newDict)
View(newDict)
remove(newDict)
newDict <- new(data.frame())
newDict <- new(data.frame
)
newDict <- data.frame()
newDict
newDict <- myDict[is.na(myDict$VARIABLE.NAME),]
View(newDict)
newDict <- myDict[myDict$VARIABLE.NAME) == names(myDATA),]
newDict <- myDict[myDict$VARIABLE.NAME == names(myDATA),]
newDict <- myDict[myDict$VARIABLE.NAME == "UNITID",]
newDict <- rbind(newDict, myDict[myDict$VARIABLE.NAME == "HCM2",])
for (c in names(myDATA)) {
newDict <- rbind(newDict, myDict[myDict$VARIABLE.NAME == c,])}
clean(newDict)
remove(newDict)
newDict <- data.frame()
for (c in names(myDATA)) {
newDict <- rbind(newDict, myDict[myDict$VARIABLE.NAME == c,])}
write.csv(newDict, "Problem C - Filtered Dictionary")
